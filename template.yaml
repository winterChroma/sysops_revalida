AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  frab-revalida
Globals:
  Function:
    Timeout: 60

Resources:
  BookNewRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book_new_ride/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
      Policies:
        - DynamoDBWritePolicy:
            TableName:
              !Ref FrabTable
      Events:
        BookNewRideApi:
          Type: Api
          Properties:
            Path: /rides
            Method: post
            RestApiId: !Ref FrabApi
  
  GetRideInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_ride_info/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_inverted_index
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              !Ref FrabTable
      Events:
         GetRideInfoApi:
          Type: Api
          Properties:
            Path: /rides/{rideId}
            Method: get
            RestApiId: !Ref FrabApi

  UpdateLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_location/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_ride_state_update
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref FrabTable
      Events:
        UpdateLocationApi:
          Type: Api
          Properties:
            Path: /{riderType}/{riderId}/locations
            Method: put
            RestApiId: !Ref FrabApi
  
  GetLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_location/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_inverted_index
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              !Ref FrabTable
      Events:
        GetLocationApi:
          Type: Api
          Properties:
            Path: /{riderType}/{riderId}/
            Method: get
            RestApiId: !Ref FrabApi

  AcceptRideRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: accept_ride_request/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_inverted_index
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref FrabTable
      Events:
        AcceptRideRequestApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/rides/{rideId}/accept
            Method: put
            RestApiId: !Ref FrabApi
            
  ReturnAcceptableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: return_acceptable_rides/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_pending_rides
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref FrabTable
      Events:
        AcceptRideRequestApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/rides/acceptable
            Method: get
            RestApiId: !Ref FrabApi

  ComputeDistanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: compute_distance/
      Handler: app.lambda_handler
      Runtime: python3.6
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          dbName: !Ref FrabTable
          dbRegion: !Ref "AWS::Region"
          dbIndex: frab_inverted_index
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              !Ref FrabTable
      Events:
        AcceptRideRequestApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/distance
            Method: put
            RestApiId: !Ref FrabApi

  FrabBasicAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties: 
      CodeUri: authorizer/
      Handler: app.handler
      Runtime: nodejs12.x

  FrabApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: FrabBasicAuthorizer
        Authorizers:
          FrabBasicAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt FrabBasicAuthorizerFunction.Arn
            Identity:
              Headers:
                - "Authorization"
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"
              WWW-Authenticate: >-
                'Authorization'

  FrabTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "datePendingState"
          AttributeType: "S"
        - AttributeName: "state"
          AttributeType: "S"
        - AttributeName: "driverIdKey"
          AttributeType: "S"
        - AttributeName: "stateDate"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      TableName: "frab_revalida"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: "frab_inverted_index"
          KeySchema:
            - AttributeName: "SK"
              KeyType: "HASH"
            - AttributeName: "PK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "timestamp"
              - "location"
              - "state"
              - "driverId"
              - "locationId"
        - IndexName: "frab_pending_rides"
          KeySchema:
            - AttributeName: "state"
              KeyType: "HASH"
            - AttributeName: "datePendingState"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "bookingLocation"
              - "rideId"
        - IndexName: "frab_ride_state_update"
          KeySchema:
            - AttributeName: "driverIdKey"
              KeyType: "HASH"
            - AttributeName: "stateDate"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "bookingLocation"
              - "targetLocation"
              - "state"

Outputs:
  FrabRevalidaApi:
    Description: "API Gateway endpoint URL for prod stage for Frab Revalida API"
    Value: !Sub "https://${FrabApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  # FrabApiKey:
  #   Description: "API Key ID for sending requests"
  #   Value: !Ref FrabApiKey
  